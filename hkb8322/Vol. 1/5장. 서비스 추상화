# 5.1 사용자 레벨 관리 기능 추가

## `Level` Enum

- 일정한 종류의 정보를 문자열로 관리하는 것은 좋지 않음
- 의미 없는 숫자도 타입이 안전하지 않아 위험할 수 있음
    - 범위를 벗어나는 값을 넣는 등 논리적 오류 발생 가능성 존재
- 따라서 열거형을 통해 관리하는 것이 좋음

## `UserDaoJdbc` 수정

- 쿼리 문법이 잘못된 경우 실행 시 `BadSqlGrammarException` 발생
- 실행 전까지 발견하기 힘드므로 빠르게 실행 가능한 포괄적인 테스트를 만들어두면 좋음

## 수정 테스트 보완

- 수정할 로우의 내용이 바뀐 것만 확인하고 수정하지 않아야 할 로우도 변경되는지 확인하지 않음

### 보완 방법

1. `JdbcTemplate`의 `update()` 메서드를 통해 영향 받은 로우의 개수를 돌려 받고 확인
2. ✅ 테스트를 보강하여 원하는 사용자 외의 정보는 변경되지 않았음을 직접 확인

## `UserService.upgradeLevels()`

- `UserService`는 `UserDao`의 구현 클래스가 바뀌어도 영향받지 않도록 해야 함
- 데이터 액세스 로직의 변경으로 인해 비즈니스 로직을 변경하지 말아야 함 (DIP)

## `UserSericeTest` 테스트 클래스

```java
@Autowired
UserService userService;

@Test
public void bean() {
	assertThat(this.userService, is(notNullValue()));
}
```

- 빈 등록 여부 확인도 이렇게 테스트 코드로 가능

## `UserService.add()`

- `User` 오브젝트의 레벨이 변경되었는지 확인할 수 있는 방법은 아래와 같음
    - `UserService.add()` 실행 시 오브젝트 레벨 확인
    - `UserService.get()` 활용하여 필드 확인

## 코드 개선

- 아래 사항에 해당되지는 않는지 늘 확인 필요
    - 코드에 중복된 부분은 없는가?
    - 코드가 무엇을 하는 것인지 이해하기 불편하지 않은가?
    - 코드가 자신이 있어야 할 자리에 있는가?
    - 앞으로 변경이 일어난다면 어떤 것이 있을 수 있고, 그 변화에 쉽게 대응할 수 있게 작성되어 있는가?

## `upgradeLevels()`, `UserServiceTest` 리팩토링

### `upgradeLevels()`

- 업그레이드 조건을 각 레벨별로 관리 및 해당 조건들을 별도 메소드로 관리
- `Level` Enum에서 각 레벨별로 업그레이드 시 바뀔 레벨을 `next` 필드를 통해 조회 가능하도록 변경
- `Level`의 `next` 필드가 null이 아닌 경우에 한하여 업그레이드 가능하도록 개선

### `UserServiceTest`

- 업그레이드를 위한 로그인 횟수 등 중복되는 리터럴은 상수로 선언하여 사용
    - 이때, 테스트에서는 가능한 경계 값을 사용하여 테스트하는 것이 좋음

⇒ **오브젝트에게 데이터를 요구하지 말고 작업을 요청하는 것은 객체지향 프로그래밍의 가장 기본이 되는 원리**

# 5.2 트랜잭션 서비스 추상화

## 테스트용 `UserService` 대역

- 간단히 `UserService`를 상속 받아 테스트에 필요한 기능을 추가하도록 메소드 오버라이딩
- 업그레이드 시 특정 Id 값인 경우에 한하여 무조건 예외가 발생하도록 처리
- TestUserService는 테스트 메소드에서만 사용되므로 빈으로 등록할 필요도 없음
- 예외 발생 시 전체 사용자 롤백이 되지 않음

## 테스트 실패의 원인

- 모든 사용자의 레벨을 업그레이드하는 `upgradeLevels()` 메소드가 하나의 트랜잭션 안에서 동작하지 않았기 때문
- 트랜잭션은 원자성을 보장해야 함

## 트랜잭션 경계 설정

- 트랜잭션의 시작을 선언하고 커밋 또는 롤백을 통하여 트랜잭션을 종료하는 작업을 **트랜잭션 경계설정**이라 함
    - `트랜잭션 롤백` : 하나의 작업 실패 시 전체 작업 취소
    - `트랜잭션 커밋` : 전체 작업 성공 후 작업 확정
    - `로컬 트랜잭션` : 하나의 DB 커넥션 내 만들어지는 트랜잭션

## UserService 트랜잭션 경계설정의 문제점
1. DB 커넥션을 깔끔하게 처리했던 `JdbcTemplate` 활용 불가
2. DAO 메소드와 비즈니스 로직을 담고 있는 `UserService`의 메소드에 `Connection` 파라미터가 추가되어야 함
3. `Connection` 파라미터가 `UserDao` 인터페이스 메소드에 추가되면 `UserDao`는 더 이상 데이터 액세스 기술에 독립적일 수 없음
4. DAO 메소드에 `Connection` 파라미터를 받게 하면 테스트 코드에도 영향을 미침
